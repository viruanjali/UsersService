server.port=${PORT:0}
spring.application.name=users-ws
logging.file.name=${user.home}/PhotoApp/logs/${spring.application.name}.log

#Eureka Client Configuration
eureka.client.serviceUrl.defaultZone=http://localhost:8010/eureka
eureka.instance.prefer-ip-address=true
eureka.instance.instance-id=${spring.application.name}:${eureka.instance.instance_id:${random.value}}

#Actuator configuration
management.endpoints.web.exposure.include=*
management.endpoint.shutdown.enabled=true

#Customise /info actuator end point
info.app.name=User MicroService Application
info.app.description=This micro service is used to manage user details 
info.app.version=0.0.1-SNAPSHOT

#Allow all request only from specific ip address
ip.address.security.allow=192.168.1.2

#Database common Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

#H2 Database Web Configuration
spring.h2.console.enabled=true
spring.h2.console.settings.web-allow-others=true

#MYSQL Database Configuration
spring.datasource.url=jdbc:mysql://localhost:3306/photoappdb?createDatabaseIfNotExist=true&useSSL=false&useUnicode=yes&characterEncoding=UTF-8&allowPublicKeyRetrieval=true&serverTimezone=UTC
#spring.datasource.username=****
#spring.datasource.password=****
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect

#JWT Configuration
jwt.token.expirationTime=0
jwt.token.secret=Password@1234
login.url.path=/users/login

#RabbitMQ configuration which uses AMQP(Advance Messaging Queuing Protocol) protocol to push message properties
# to all micro services
spring.rabbitmq.host= localhost
spring.rabbitmq.port= 5672
spring.rabbitmq.username= admin
spring.rabbitmq.password=admin


#Rest call to albums-ws service to get all albums associated to a user. Just replace %s with valid userId. This requires @LoadBalanced over RestTemplate Bean
albums.get.api.url=http://ALBUMS-WS/users/%s/albums

logging.level.com.amsidh.mvc.repository.AlbumServiceClient=DEBUG

get.users.albums.method.name=getAlbumsByUserId
albums.exception.albums.not.found=Users Albums are not found


#Enable Hystrix Feign Client for dumpy implementation for services down. ie provide
#Fallback Mechanism for the micro service which get down. We provide user defined reply
feign.hystrix.enabled=true

#Configure sleuth and zipkin for tracing micro-services calls. TraceId And SpanId way. 
# For Starting zipkin server download the ZIPkin and run the jar file like java -jar zipkinJarFileName.jar
spring.zipkin.base-url=http://localhost:9411
spring.zipkin.sender.type=web
spring.sleuth.sampler.percentage=1


security.filter-order=5
